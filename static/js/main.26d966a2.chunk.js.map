{"version":3,"sources":["components/Calculator/Styled.js","shared/Button/index.js","shared/Input/index.js","components/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["CalculatorWrapper","styled","div","Display","ButtonsWrapper","BackSpaceIcon","IoBackspaceOutline","Button","button","props","width","backgroundColor","borderColor","Input","input","attrs","value","type","readOnly","maxLength","height","fontSize","color","Calculator","useState","inputValue","setInputValue","resultValue","setResultValue","buttonsData","code","inputValueChangeHandler","val","charNaN","newInputValue","test","substring","length","sum","split","reduce","a","b","toFixed","Number","isNaN","charAt","sub","_","multiple","filter","x","divide","toString","keyDownHandler","e","console","log","keyCode","forEach","map","item","onClick","onKeyDown","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26d966a2.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport {IoBackspaceOutline} from 'react-icons/io5';\r\n\r\nconst CalculatorWrapper = styled.div`\r\n  width: 380px;\r\n  height: 620px;\r\n  background-color: lightblue;\r\n  border: 1px solid black;\r\n  margin: 0 auto;\r\n`\r\nconst Display = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 120px;\r\n  background-color: #fff;\r\n  border: 1px solid black;\r\n  margin: 20px;\r\n`\r\nconst ButtonsWrapper = styled.div`\r\n  margin-top: 20px;\r\n`\r\nconst BackSpaceIcon = styled(IoBackspaceOutline)`\r\n  color: grey;\r\n`\r\n\r\nexport {CalculatorWrapper, Display, ButtonsWrapper, BackSpaceIcon}","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  width: ${props=> props.width ? props.width : '70px'};\r\n  height: 70px;\r\n  background-color: ${props=> props.backgroundColor ? props.backgroundColor : '#fff'};\r\n  font-size: 20px;\r\n  border-color: ${props=>props.borderColor && props.borderColor };\r\n  cursor: pointer;\r\n  margin: 10px;\r\n\r\n  &:active, &:focus {\r\n      outline: none;\r\n  }\r\n`\r\nexport default Button","import styled from 'styled-components';\r\n\r\nconst Input = styled.input.attrs(\r\n    props => (\r\n        {\r\n            value: props.value,\r\n            type: 'text',\r\n            readOnly: true,\r\n            maxLength:16\r\n        })\r\n)`\r\n  width: 95%;\r\n  height:${props => props.height && props.height};\r\n  border: 0;\r\n  font-size:${props=>props.fontSize && props.fontSize };\r\n  color:${props=>props.color && props.color };\r\n  font-weight: 500;\r\n  text-align: right; \r\n  letter-spacing: 5px;\r\n\r\n  &:active, &:focus {\r\n    outline: none;\r\n}\r\n`\r\n\r\nexport default Input","import React, { useState } from 'react';\r\nimport _ from 'lodash';\r\nimport { CalculatorWrapper, Display, ButtonsWrapper, BackSpaceIcon } from './Styled';\r\nimport Button from './../../shared/Button';\r\nimport Input from './../../shared/Input';\r\n\r\n\r\nconst Calculator = () => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [resultValue, setResultValue] = useState('');\r\n\r\n    const buttonsData = [\r\n        { value: 'AC', code: 46, backgroundColor: 'lightgrey' },\r\n        { value: <BackSpaceIcon />, code: 8, },\r\n        { value: '%', code: 48 },\r\n        { value: '/', code: 111, borderColor: 'orange' },\r\n        { value: '7', code: 103 },\r\n        { value: '8', code: 104 },\r\n        { value: '9', code: 105 },\r\n        { value: '*', code: 106, borderColor: 'orange' },\r\n        { value: '4', code: 100 },\r\n        { value: '5', code: 101 },\r\n        { value: '6', code: 102 },\r\n        { value: '-', code: 109, borderColor: 'orange' },\r\n        { value: '1', code: 97 },\r\n        { value: '2', code: 98 },\r\n        { value: '3', code: 99 },\r\n        { value: '+', code: 107, borderColor: 'orange' },\r\n        { value: '.', code: 110 },\r\n        { value: '0', code: 96 },\r\n        { value: '=', code: 187, backgroundColor: 'orange', borderColor: 'black', width: '160px' },\r\n    ];\r\n\r\n    const inputValueChangeHandler = (code, val) => {\r\n        let charNaN = '';\r\n        let newInputValue = inputValue + val;\r\n\r\n        if (val !== '=') {\r\n\r\n            setInputValue(newInputValue);\r\n\r\n            switch (true) {\r\n                case /\\+/.test(newInputValue.substring(0, newInputValue.length - 1)):\r\n                    let sum = newInputValue.split('+').reduce((a, b) => (+a) + (+b), 0);\r\n                    if (/\\./.test(sum)) {\r\n                        setResultValue(sum.toFixed(3));\r\n                    } else {\r\n                        setResultValue(sum);\r\n                    }\r\n                    if (Number.isNaN(sum)) {\r\n                        charNaN = newInputValue.charAt(newInputValue.length - 1);\r\n                        sum = newInputValue.substring(0, newInputValue.length - 1).split('+').reduce((a, b) => (+a) + (+b), 0);\r\n                        if (/\\./.test(sum)) {\r\n                            setInputValue(sum.toFixed(3) + charNaN);\r\n                            setResultValue(sum.toFixed(3));\r\n                        } else {\r\n                            setInputValue(sum + charNaN);\r\n                            setResultValue(sum);\r\n                        }\r\n                    }\r\n                    break;\r\n                case /\\-/.test(newInputValue.substring(0, newInputValue.length - 1)):\r\n                    let sub = _.reduce(newInputValue.split('-'), (a, b) => a - b);\r\n                    if (/\\./.test(sub)) {\r\n                        setResultValue(sub.toFixed(3));\r\n                    } else {\r\n                        setResultValue(sub);\r\n                    }\r\n                    if (Number.isNaN(sub)) {\r\n                        charNaN = newInputValue.charAt(newInputValue.length - 1);\r\n                        sub = _.reduce(newInputValue.substring(0, newInputValue.length - 1).split('-'), (a, b) => a - b);\r\n                        if (/\\./.test(sub)) {\r\n                            setInputValue(sub.toFixed(3) + charNaN);\r\n                            setResultValue(sub.toFixed(3));\r\n                        } else {\r\n                            setInputValue(sub + charNaN);\r\n                            setResultValue(sub);\r\n                        }\r\n                    }\r\n                    break;\r\n                case /\\*/.test(newInputValue.substring(0, newInputValue.length - 1)):\r\n                    let multiple = newInputValue.split('*').filter(x => x.length !== 0).reduce((a, b) => a * b, 1);\r\n                    if (/\\./.test(multiple)) {\r\n                        setResultValue(multiple.toFixed(3));\r\n                    } else {\r\n                        setResultValue(multiple);\r\n                    }\r\n                    if (Number.isNaN(multiple)) {\r\n                        charNaN = newInputValue.charAt(newInputValue.length - 1);\r\n                        multiple = newInputValue.substring(0, newInputValue.length - 1).split('*').reduce((a, b) => a * b, 1);\r\n                        if (/\\./.test(multiple)) {\r\n                            setInputValue(multiple.toFixed(3) + charNaN);\r\n                            setResultValue(multiple.toFixed(3));\r\n                        } else {\r\n                            setInputValue(multiple + charNaN);\r\n                            setResultValue(multiple);\r\n                        }\r\n                    }\r\n                    break;\r\n                case /\\//.test(newInputValue.substring(0, newInputValue.length - 1)):\r\n                    let divide = _.reduce(newInputValue.split('/').filter(x => x.length !== 0), (a, b) => a / b);\r\n                    if (/\\./.test(divide)) {\r\n                        setResultValue(divide.toFixed(3));\r\n                    } else {\r\n                        setResultValue(divide);\r\n                    }\r\n                    if (divide === 'NaN' || Number.isNaN(divide)) {\r\n                        charNaN = newInputValue.charAt(newInputValue.length - 1);\r\n                        divide = _.reduce(newInputValue.substring(0, newInputValue.length - 1).split('/'), (a, b) => a / b);\r\n                        if (/\\./.test(divide)) {\r\n                            setInputValue(divide.toFixed(3) + charNaN);\r\n                            setResultValue(divide.toFixed(3));\r\n                        } else {\r\n                            setInputValue(divide + charNaN);\r\n                            setResultValue(divide);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (inputValue.length !== 0 && resultValue.length === 0) {\r\n                setInputValue(inputValue);\r\n                setResultValue('');\r\n            } else {\r\n                setInputValue(resultValue);\r\n                setResultValue('');\r\n            }\r\n        }\r\n        if (val === 'AC') {\r\n            setInputValue('');\r\n            setResultValue('');\r\n        }\r\n        if (code === 8) {\r\n            setInputValue(inputValue.toString().substring(0, inputValue.toString().length - 1));\r\n        }\r\n    }\r\n\r\n    const keyDownHandler = e => {\r\n        console.log(e.keyCode, 'code')\r\n        buttonsData.forEach(button => {\r\n            if (e.keyCode === button.code) {\r\n                inputValueChangeHandler(button.code, button.value)\r\n            }\r\n        })\r\n    }\r\n    // console.log(inputValue, resultValue, 'before render')\r\n    return (\r\n        <>\r\n            <h1>Calculator</h1>\r\n            <CalculatorWrapper>\r\n                <Display>\r\n                    <div>\r\n                        <Input height='40px' fontSize=\"25px\" value={inputValue} />\r\n                        <Input height='30px' fontSize=\"18px\" color=\"grey\" value={resultValue} />\r\n                    </div>\r\n                </Display>\r\n                <ButtonsWrapper>\r\n                    {buttonsData.map(item => <Button key={item.code}\r\n                        onClick={() => inputValueChangeHandler(item.code, item.value)}\r\n                        onKeyDown={keyDownHandler}\r\n                        width={item.width}\r\n                        backgroundColor={item.backgroundColor}\r\n                        borderColor={item.borderColor}>{item.value}</Button>)}\r\n                </ButtonsWrapper>\r\n            </CalculatorWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Calculator","import './App.css';\nimport Calculator from './components/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}